

edycja pliku ma otwierać wielkie okno, z edytorem
po dokonaniu zmian, ma isc request zapisujacy zmiany
po zapisaniu zmian, przywrócony ma zostać tryb podglądu

            //jak jesteśmy w trybie edycji, to ignorować globalny handler ze zdarzeniami klawiatury
            //zrobić inny "korzeń" z widokiem
                zrobić tak, ze widok edycji zastepuje caly panel ...
                wtedy zdarzenia do nawigacji po strukturze sie odlacza




zrobić wyszukiwarkę w nazwach.
    ma się wyskakujące okno, w nim będzie znajdować się pole do wpisania szukanej frazy.
    będziemy w liście wyników wyszukiwać rekurencyjnie kolejnych zagniedzen

    list ściezek i zaznaczony w niej szukany fragment
    wyszukujemy dopiero po tym jak zostanie wpisane co najmniej dwie litery

    klikniecie na sziezke, bedzie kasować wyszukiwaną frazę i przenosić na poszukiwany element



Dodać jakąś nawigację po hashu, po to aby mozna było miec kilka zakladek w przegladarce




/*
onKeyDown={on_keydown} tabindex="0"
*/



jak jestesmy w podgladzie katalogu, wyświetlać miniaturki
    zdjęcia, wyświetlać w jakiejś rozdzielczości ...


zrobić opcje sortowania. jesli nazwa elementu zawiera na początku znak "_" to takie elementy mają być sorotowane w pierwszej kolejności na samym początku
    to ma działać na zasadzie "pineski" ze slacka. Która wyrónia i przypina element na samym początku listy.


przydałoby się zrobić obsługę klawiatury, zeby byla podpieta na globalnym dokumencie. teraz trzeba focusa zeby odpalaly sie te zdarzenia
    fajnie jakby dalo sie zrobic jakas reprezentacje w domie
    a moze element root, z zalozenia to bylby ten element, ktory zawsze ma focusa ????


jak jesteśmy na elemencie który jest pdf, to znaleźć jakiś patent na wyświetlanie pdf-a

Wyswietlanie poprzez zewnetrzny odnośnik
https://docs.google.com/gview?url=https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Polish.pdf&embedded=true

https://stackoverflow.com/questions/4853898/display-pdf-within-web-browser

<iframe src="http://docs.google.com/gview?url=http://path.com/to/your/pdf.pdf&embedded=true" 
style="width:600px; height:500px;" frameborder="0"></iframe>

lub otwierac w nowej karcie ??

ewentualnie otwierać w iframe. Wtedy przeglądarka zajmie się resztą




moliwe ze przydala by sie pamięc tymczasowa, która pozwoli na zapisywanie takich informacji jak miniaturka
oraz aktualnie otwierana strona w pdf ...




---------------------------------------------------------------------------------------------------
na później - ??
---------------------------------------------------------------------------------------------------


mozna by sie pobawic contentEditable
ustawić ten atrybut dla tresci html
edytor posiadalby tekst + aktualna pozycje kursora

trzba by zrobic funkcje, ktora wyliczy reprezentacje tresci oraz znajdzie odpowiedznia pozycje
w wynikowej tresci dla ktorej powinien zostac ustawiony kursor

w sumie, kursor mógłby być reprezentowany przez <span> nie posiadajacy dzieci
kursor bylby ustawiony na niego


https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Window.html#method.get_selection


wektor
    element
        moze byc zwykłym znakiem
        lub moze byc kursorem


kursor moze zawierac sie do lewej strony, ale moze tez zawierac się do strony prawej
ilość "zawierań" się moze być liczona




/*
dodać zakładki
    zakładka1: notatki
    zakładka2: parsowanie urla ...

    zakładka - zarządzanie gitem
        menu pozwalające usuwać niepotrzebne gałęzie gita ...
    
        pozwoli np. ta funkcja na uruchomienie polecenia rebejsującego
*/






dodać obsługę innych statusów, np. 404
        request.spawn_local(async move {
            let response = response.await;
            value.set_value(response.map(|item| Rc::new(item.content)));
        });
    teraz za kadym razem spodzieway się obiektu.
    a czasami moze coś innego zwrócić serwer



wklejając linka z youtube, dodawać pobrany automatycznie z sieci tytuł tego filmiku



mouseover
mouseout
niech globalne handlery włączają się tylko wtedy gdy jest chociaz jedno zdarzenie tego typu podpięte





jak dodajemy onKeyDown, to wymuszać zawsze dodawanie jakiego kolwiek indexu, po to aby łapał eventy
onKeyDown={on_keydown} tabindex="-1"


Dodać izolowanie błędu jakieś
jak poleci panic, to niech nie rozwala obsługi kolejnych eventów ...
